<!DOCTYPE html>
<html>
    <head>
        
        <title>Javascript single-page application example (for Beginner)</title>
        
        <meta charset="UTF-8">
        <meta name="description" content="Simple and fully customizable user interface component. Design for mobile (iOS, Android) app development on Apache Cordova framework.">
        <meta name="keywords" content="Select Text, Combobox, searchable, JavaScript, JS, UI, UX, User Interface, Component, Apache, Cordova, Mobile, iOS, Android, simple, fully customizable" >
        <meta name="author" content="Bugra Ozden">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">

        <!-- LIBRARY FILES -->
        <script src="library/src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>
        <link rel="stylesheet" type="text/css" href="library/basic.min.css">
        <script src="library/basic.min.js" type="text/javascript" charset="utf-8"></script>

        <style>

            body {
                overflow: hidden;
            }

            .basic_box::-webkit-scrollbar {
                width: 10px;
                height: 10px;
            }

            .basic_box::-webkit-scrollbar-track {
                border-radius: 10px;
                border: 3px solid rgba(0, 0, 0, 0);
                background-clip: padding-box;
            }

            .basic_box::-webkit-scrollbar-thumb {
                background: rgba(0, 0, 0, 0.4);
                border-radius: 10px;
                border: 3px solid rgba(0, 0, 0, 0);
                background-clip: padding-box;
            }

            .basic_box::-webkit-scrollbar-thumb:hover {
                background: rgba(0, 0, 0, 0.6);
                border-radius: 10px;
                border: 3px solid rgba(0, 0, 0, 0);
                background-clip: padding-box;
            }

            .text-highlight {
                font-family: opensans-bold;
                /* color: #41AC9F; */
                /* background-color: #FFF0C2; */
                border-radius: 4px;
                padding: 0px 8px;
            }

            .editor { 
                position:relative;
                margin:0px;
                border-radius: 6px;
                /* margin-left: 5px;margin-right: 0px; */
                height:200px;
                font-size: 16px;
            }

        </style>

        <script>
            
        // VARIABLES
        var boxContent
        var editor1
        
        // First running function.
        var start = function() {

            page.fit(600)

            // BOX: main view
            boxContent = createBox(0, 0, page.width, page.height)
            that.scrollY = 1
            that.visible = 1

            // LABEL: Title text
            boxContent.lblTitle = createLabel(0, 104, 600, "auto")
            that.text = document.getElementById("htm-title").innerHTML
            that.fontSize = 70
            that.textAlign = "center"
            that.opacity = 0.8
            that.textColor = "black"
            that.element.style.fontFamily = "opensans-bold"
            that.center("left")

            // LABEL: Description text
            boxContent.lblDesc = createLabel(0, 200, 600, "auto")
            that.text = document.getElementById("htm-desc").innerHTML
            that.fontSize = 35
            that.textAlign = "center"
            that.opacity = 0.6
            that.textColor = "black"
            that.center("left")

            // BOX: sample1 iframe content
            boxContent.boxSample1 = createBox(0, 370, 360, 640)
            that.text = document.getElementById("htm-sample1").innerHTML
            that.clickable = 1
            that.round = 12
            that.color = "white"
            that.center("left")

            // IMAGE: phone template
            boxContent.imgPhone = createImage(0, 370, 360, 640)
            that.load("image/phone.svg")
            that.center("left")
            that.width += 10 
            that.height += 8
            that.top -= 4
            that.left -= 5

            // LABEL: info 1 text
            boxContent.lblInfo1 = createLabel(0, 1050, 600, "auto")
            // that.text = document.getElementById("htm-info1").innerHTML + "<br><br>" + document.getElementById("htm-info2").innerHTML
            that.text = document.getElementById("htm-info1").innerHTML
            that.fontSize = 20
            that.textAlign = "center"
            that.opacity = 0.6
            that.textColor = "black"
            that.center("left")

            // BOX: GÄ°tHub Button
            boxContent.btnGitHub = createCard("View on GitHub", 1, "https://github.com/bug7a/javascript-single-page-application-example")
            that.center("left")
            that.top = boxContent.lblInfo1.top + 100

            // BOX: code box
            boxContent.boxEditor = createBox(0, 1300, 600, 400)
            that.element.setAttribute("id", "editor1")
            that.element.setAttribute("class", "editor")
            that.onResize(function(self) {
                boxContent.boxFooter.top = self.top + self.height + 20
            })
            that.center("left")
            
            // BOX: Footer box
            boxContent.boxFooter = createBox(0, 2200, 600, 200)
            that.color = "transparent"
            that.center("left")

            // OBJECT: Mobile App Template Button
            // boxContent.boxFooter.btn3 = createCard("Mobile App Template", 2, "https://github.com/bug7a/cordova-mobile-app-ui-template")
            that.center()

            // OBJECT: All Components Button
            boxContent.boxFooter.btn2 = createCard("Other Example", 2, "https://bug7a.github.io/cordova-mobile-app-ui-template/")
            that.center()
            that.left -= 100

            // OBJECT: basic.js Technique Button
            boxContent.boxFooter.btn4 = createCard("basic.js Technique", 2, "https://github.com/bug7a/basic.js")
            that.center()
            that.left += 100

            // Code Editor
            editor1 = ace.edit("editor1");
            editor1.setReadOnly(true);
            editor1.setTheme("ace/theme/ambiance");
            editor1.session.setMode("ace/mode/javascript");
            editor1.setOption("minLines", 8);
            editor1.setOption("maxLines", 500);
            editor1.renderer.setShowGutter(false);
            // document.getElementById("editor"+$editorNumber).style.zoom = (1 / App.screenRatio);
            editor1.setValue(document.getElementById("code-example1").innerHTML);
            editor1.gotoLine(2);

            page.onResize(function() {
                
                page.fit(600)
                boxContent.width = page.width
                boxContent.height = page.height
                boxContent.lblTitle.center("left")
                boxContent.lblDesc.center("left")
                boxContent.boxSample1.center("left")
                boxContent.imgPhone.center("left")
                boxContent.lblInfo1.center("left")
                boxContent.btnGitHub.center("left")
                boxContent.boxEditor.center("left")
                boxContent.boxFooter.center("left")
            })
            
        }
        
        // OTHER FUNCTIONS
        
        var createCard = function(name, type = 1, link = "") {
            
            var ui = createBox(0, 0, 210, 70)
            that.color = "white"
            that.round = 8
            that.border = 2
            that.borderColor = "gray"
            that.link = link
            that.onClick(function(self) {
                if (self.link != "") {
                    window.open(self.link, "_blank")
                }
            })

            if (type == 2) {
                that.width = 190
                that.height = 50
                that.color = "white"
                that.border = 1
                that.borderColor = "lightgray"
                //that.color = "#EAEAE9"
                //that.border = 0
            }

            ui.lblText = createLabel(0, 0, "auto", "auto")
            that.text = name
            if (type == 2) {

                that.fontSize = 16
            }
            that.onResize(function(self) {
                self.center()
            })

            makeBasicObject(ui)

            return ui
            
        }

        </script>

    </head>
    <body>
        
        <!-- HTML content -->

        <div id="htm-title" style="display:none">JavaScript</div>
        <div id="htm-desc" style="display:none">Single-page<br>application example.</div>
        <!-- <div id="htm-title" style="display:none">Single-page</div>
        <div id="htm-desc" style="display:none">application example<br>with JavaScript.</div> -->
        <div id="htm-info1" style="display:none">An easy technique to learn<br> for those who know a programming language like<br><span class='text-highlight'>C, C++, C#, Java, Python or Swift.</span></div>
        <div id="htm-sample1" style="display:none"><iframe src="sample1.htm" width="360" height="640" style="border:0px solid lightgray;border-radius:4px;"></iframe></div>

        <div id="code-example1" style="display:none">
    var USED_WIDTH = 500
    var MAX_ZOOMABLE_WIDTH = 700
    
    var taskList = []
    var taskDataList = []
    
    // BOX: Container box of home content.
    var homePage
    
    // Shortcut names for frequently used objects.
    var txtNewTask
    var lblSelectedCount
    
    // First running function.
    var start = function() {
    
        // Support all resolutions.
        page.fit(USED_WIDTH, MAX_ZOOMABLE_WIDTH)
    
        // Restore saved information.
        loadTaskDataList()
    
        // UI: HOME PAGE:
        // BOX: Container box of home content. Parameters: left, top, width, height.
        homePage = createBox(0, 0, USED_WIDTH, page.height)
        that.color = "white"
        that.center("left")
        
        // UI: ADD NEW TASK:
        // BOX: Container box for adding new task.
        homePage.boxNewTask = createBox(10, 10, 480, 80)
        that.color = "whitesmoke"
        that.border = 0
        that.round = 16
        
        // TEXTBOX: Where the new task is written.
        homePage.boxNewTask.txtNewTask = createTextBox(20, 15, 380)
        that.minimal = 1
        that.color = "transparent"
        that.inputElement.setAttribute("placeholder", "Add a task")
        that.onChange(addTask)
        // Set shortcut name.
        txtNewTask = homePage.boxNewTask.txtNewTask
    
        // LABEL: Add new task label button.
        homePage.boxNewTask.lblAddButton = createLabel()
        that.text = "+"
        that.textAlign = "center"
        that.color = "#23BCC1BB"
        that.textColor = "rgba(255, 255, 255, 0.95)"
        that.height = 50
        that.width = that.height
        that.fontSize = 36
        that.round = 25
        that.aline(txtNewTask, "right", 5)
        that.onClick(addTask)
        
        // UI: TASK ITEMS:
        // BOX: Scrollable container box of task items.
        homePage.boxTaskItemList = createBox(10, 100, 480, page.height - 110)
        that.color = "white"
        that.border = 0
        that.scrollY = 1
        
        // UI: DELETE TASKS:
        // BOX: Container box for delete tasks.
        homePage.boxDeleteTask = createBox(10, 10, 480, 80)
        that.color = "whitesmoke"
        that.round = 16
        that.visible = 0
    
        // BOX: Background box for delete image.
        homePage.boxDeleteTask.boxBackground = createBox(0, 0, 55, 55)
        that.color = "#ED6D5230"
        that.round = 30
        that.center()
        that.onClick(removeSelectedTasks)
    
        // IMAGE: Delete image.
        homePage.boxDeleteTask.boxBackground.imgDelete = createImage(0, 0, 35, 35)
        that.load("images/trash.svg")
        that.opacity = 0.9
        that.center()
    
        // LABEL: Count of selected items on delete image.
        homePage.boxDeleteTask.lblCount = createLabel()
        that.left = homePage.boxDeleteTask.boxBackground.left + 41
        that.top = homePage.boxDeleteTask.boxBackground.top - 4
        that.width = "auto"
        that.height = "auto"
        that.color = "white"
        that.text = "0"
        that.textColor = "#141414"
        that.fontSize = 16
        that.spaceY = 2
        that.spaceX = 7
        that.border = 1
        that.borderColor = "#141414"
        that.element.style.fontFamily = "opensans-bold"
        that.round = 50
        that.opacity = 0.7
        // Set shortcut name.
        lblSelectedCount = homePage.boxDeleteTask.lblCount
    
        // When page reopens, create old records.
        refreshTasks()
    
        // Run each time the page size changes.
        page.onResize(resizeHomePage)
    }
    
    var resizeHomePage = function() {
    
        page.fit(USED_WIDTH, MAX_ZOOMABLE_WIDTH)
    
        homePage.height = page.height
        homePage.boxTaskItemList.height = page.height - 110
        homePage.center("left")
    }
    
    var addTask = function() {
    
        var taskText = txtNewTask.text
    
        if (taskText != "") {
            addTaskItem(taskText)
            addTaskData(taskText)
    
            txtNewTask.text = ""
        }
    }
    
    // Clear all tasks and recreate based on data list.
    var refreshTasks = function() {
    
        // Clear all tasks.
        taskList = []
        homePage.boxTaskItemList.html = ""
    
        for (var i = (taskDataList.length - 1); i >= 0; i--) {
            addTaskItem(taskDataList[i])
        }
    }
    
    // Add new task item object.
    var addTaskItem = function(taskText) {
    
        var newItem = createTaskItem(taskText)
        homePage.boxTaskItemList.add(newItem)
    
        taskList.unshift(newItem)
    
        // After the automatic size calculation is complete, reposition the objects.
        newItem.lblText.onResize(repositionTasks)
    
        // NOTE: .onResize() has been added for each item of the tasks;
        // when a task's text changes size, all tasks are repositioned.
    }
    
    // Add new task data.
    var addTaskData = function(taskText) {
        taskDataList.unshift(taskText)
        saveTaskDataList()
    }
    
    // Create new task item object.
    var createTaskItem = function(taskText) {
    
        // BOX: Task item container box.
        var box = createBox(0, 0, 480, 100)
        that.color = "white"
        that.round = 4
        that.onClick(selectTask)
        // Let vertical position change be with motion.
        that.setMotion("top 0.3s")
    
        // LABEL: Task text.
        box.lblText = createLabel(50, 10, 410, "auto")
        that.color = "transparent"
        that.text = taskText
    
        // BOX: Selection circle.
        box.boxTick = createBox(15, 15, 20, 20)
        that.round = 10
        that.border = 1
        that.color = "whitesmoke"
        that.borderColor = "lightgray"
    
        // Define a variable inside the object.
        box.isSelected = 0
    
        makeBasicObject(box)
        return box
    }
    
    var selectTask = function(clickedTask) {
    
        // If item is selected:
        if (clickedTask.isSelected) {
            // Unselect it.
            clickedTask.isSelected = 0
            clickedTask.boxTick.color = "whitesmoke"
            clickedTask.boxTick.border = 1
            clickedTask.lblText.textColor = basic.TEXT_COLOR
            lblSelectedCount.text = num(lblSelectedCount.text) - 1
    
        } else {
            // Select it.
            clickedTask.isSelected = 1
            clickedTask.boxTick.color = "tomato"
            clickedTask.boxTick.border = 0
            clickedTask.lblText.textColor = "tomato"
            lblSelectedCount.text = num(lblSelectedCount.text) + 1
        }
    
        // Show/hide delete task box by selected count.
        if (num(lblSelectedCount.text) > 0) {
            homePage.boxDeleteTask.visible = 1
    
        } else {
            homePage.boxDeleteTask.visible = 0
        }
    }
    
    var removeSelectedTasks = function() {
    
        var newTaskDataList = []
        var newTaskList = []
    
        for (var i = 0; i < taskList.length; i++) {
            // If item is selected:
            if(taskList[i].isSelected) {
                // Remove it.
                taskList[i].remove()
    
            } else {
                // Add it to the new list.
                newTaskDataList.push(taskDataList[i])
                newTaskList.push(taskList[i])
            }
        }
    
        taskDataList = newTaskDataList
        taskList = newTaskList
        saveTaskDataList()
    
        repositionTasks()
    
        // Clean and hide delete task box.
        lblSelectedCount.text = "0"
        homePage.boxDeleteTask.visible = 0
    }
    
    var saveTaskDataList = function() {
        storage.save("todoApp-taskDataList", taskDataList)
    }
    
    var loadTaskDataList = function() {
        taskDataList = storage.load("todoApp-taskDataList") || []
    }
    
    // Because object positioning uses the coordinate system.
    var repositionTasks = function() {
    
        var top = 0
    
        for (var i = 0; i < taskList.length; i++) {
            taskList[i].top = top
            taskList[i].height = taskList[i].lblText.height + 20
    
            top += taskList[i].height
        }
    }
</div>
        
    </body>
</html>